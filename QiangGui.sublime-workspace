{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Use",
				"UserAgent"
			],
			[
				"U",
				"UserAgent"
			],
			[
				"User",
				"User-Agent"
			],
			[
				"Ch",
				"CheckPassword"
			],
			[
				"pass",
				"password_text"
			],
			[
				"AL",
				"ALIGN_CENTER"
			],
			[
				"Al",
				"ALIGN_CENTER"
			],
			[
				"Stat",
				"StaticText"
			],
			[
				"A",
				"ALIGN_CENTER"
			],
			[
				"B",
				"BORDER_NONE"
			],
			[
				"cop",
				"copyright_text"
			],
			[
				"school_",
				"school_msg"
			],
			[
				"school",
				"school_text"
			],
			[
				"author_",
				"author_name"
			],
			[
				"author",
				"author_text"
			],
			[
				"wecha",
				"wechat_text"
			],
			[
				"mail_",
				"mail_addr"
			],
			[
				"title",
				"title"
			],
			[
				"img",
				"img_dir"
			],
			[
				"CEN",
				"ALIGN_CENTER"
			],
			[
				"Top",
				"TopStateBar"
			],
			[
				"bir",
				"birth_gender_sizer"
			],
			[
				"name",
				"name"
			],
			[
				"selec",
				"selected_color"
			],
			[
				"cou",
				"counter"
			],
			[
				"MY",
				"MyFrameNAME"
			],
			[
				"C",
				"ALIGN_CENTER_HORIZONTAL"
			],
			[
				"MyFra",
				"MyFrame"
			],
			[
				"tea",
				"teacher_select_panel"
			],
			[
				"time",
				"time_select_panel"
			],
			[
				"course",
				"course_select_panel"
			],
			[
				"My",
				"MyFrameNAME"
			],
			[
				"end",
				"end_time"
			],
			[
				"pa",
				"places"
			],
			[
				"if",
				"ifmain	if __name__ == '__main__'"
			],
			[
				"def",
				"defs	Method"
			],
			[
				"get",
				"get_score"
			],
			[
				"save",
				"save_html"
			],
			[
				"url",
				"urls"
			],
			[
				"auth",
				"auth_cookie"
			],
			[
				"jwxt_",
				"jwxt_host"
			],
			[
				"cas",
				"cas_host"
			],
			[
				"cas_",
				"cas_jwxt"
			],
			[
				"ipv6",
				"ipv6_soup"
			],
			[
				"data",
				"data_list"
			],
			[
				"_get",
				"_get_parse_home_page"
			],
			[
				"intra",
				"ipv4_intranet"
			],
			[
				"_ch",
				"_check_intranet"
			],
			[
				"_che",
				"_check_network_enable"
			],
			[
				"v4",
				"v4_time_hour"
			],
			[
				"v4_tim",
				"v4_time_min"
			],
			[
				"v6",
				"v6_flow_mbyte"
			],
			[
				"v4_",
				"v4_flow_byte"
			],
			[
				"login",
				"login"
			],
			[
				"ipv4",
				"ipv4_enable"
			],
			[
				"s",
				"strip"
			],
			[
				"su",
				"sup	Tag"
			],
			[
				"re",
				"relative"
			],
			[
				"App",
				"Append"
			],
			[
				"menu",
				"menu2"
			],
			[
				"user",
				"username"
			],
			[
				"able",
				"ableCourse"
			],
			[
				"ite",
				"iteritems"
			],
			[
				"Selec",
				"SelectedPanel"
			],
			[
				"want",
				"wantPanel"
			],
			[
				"Sele",
				"SelectPanel"
			],
			[
				"Se",
				"SelectPanel"
			],
			[
				"ALIGN_C",
				"ALIGN_CENTER"
			],
			[
				"sel",
				"selectedman"
			],
			[
				"cap",
				"capacity"
			],
			[
				"wante",
				"wantAble"
			],
			[
				"Able",
				"AbleId"
			],
			[
				"coure",
				"course_name"
			],
			[
				"Ab",
				"AbleId"
			],
			[
				"SetItem",
				"SetItemData"
			],
			[
				"Get",
				"GetEventObject"
			],
			[
				"index",
				"indexPage"
			],
			[
				"get_",
				"get_text"
			],
			[
				"find",
				"find_all"
			],
			[
				"cour",
				"courseList"
			],
			[
				"couse",
				"courseList"
			],
			[
				"page",
				"pageNum"
			],
			[
				"cous",
				"courseList"
			],
			[
				"Lo",
				"Logout"
			],
			[
				"Course",
				"courseId"
			],
			[
				"Select",
				"SelectCourse"
			],
			[
				"or",
				"orderlist"
			],
			[
				"EVT",
				"EVT_LIST_ITEM_SELECTED"
			],
			[
				"Add",
				"AddMany"
			],
			[
				"log",
				"login_btn"
			],
			[
				"cata",
				"catalog"
			],
			[
				"Panel",
				"Panel"
			],
			[
				"ca",
				"campus"
			],
			[
				"username",
				"username"
			],
			[
				"css",
				"css_js_urls"
			],
			[
				"ver",
				"verify_cookie"
			],
			[
				"tyxk",
				"tyxk_index"
			],
			[
				"ty",
				"tyxk_index_url"
			],
			[
				"token",
				"token_url"
			],
			[
				"cookie",
				"cookie_BIG"
			],
			[
				"pos",
				"post_headers"
			],
			[
				"prin",
				"print_cookies"
			],
			[
				"cookies",
				"cookies"
			],
			[
				"X",
				"X-Requested-With"
			],
			[
				"_",
				"_"
			],
			[
				"h",
				"hsizer1"
			],
			[
				"hs",
				"hsizer2"
			],
			[
				"bmp",
				"bmp"
			],
			[
				"ren",
				"render_to_response"
			],
			[
				"ma",
				"max_length"
			],
			[
				"try",
				"try	Try/Except"
			],
			[
				"se",
				"session"
			],
			[
				"pad",
				"padding-top"
			],
			[
				"list",
				"list-style"
			],
			[
				"mar",
				"margin-bottom"
			],
			[
				"margin",
				"margin-top"
			],
			[
				"min",
				"min-height"
			],
			[
				"mag",
				"margin-left"
			],
			[
				"wi",
				"width"
			],
			[
				"back",
				"background-color"
			],
			[
				"read",
				"readInMemery"
			],
			[
				"Model",
				"Model"
			],
			[
				"Tur",
				"swampy.TurtleWorld"
			],
			[
				"t",
				"thead	Tag"
			],
			[
				"set",
				"setup"
			],
			[
				"hot",
				"hot"
			],
			[
				"sa",
				"small	Tag"
			],
			[
				"a",
				"Account"
			]
		]
	},
	"buffers":
	[
		{
			"file": "gui_code/main_gui.py",
			"settings":
			{
				"buffer_size": 25180,
				"line_ending": "Windows"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "note/wx笔记.md",
			"settings":
			{
				"buffer_size": 13866,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "# _*_ coding:utf-8 _*_\n\nfrom bs4 import BeautifulSoup\nfrom PIL import Image\nfrom StringIO import StringIO\nimport requests\nimport urlparse\nimport logging\nimport time\nimport useragent\n\n__doc__ = u\"tyxk登录 返回cookie：PHPSESSID\"\n\nlogging.basicConfig(\n    format=\"%(levelname)-10s %(message)s\",\n    level=logging.DEBUG)\n\nlog = logging.getLogger(\"auth\")\nhandler = logging.FileHandler(\"auth.log\")\nhandler.setLevel(logging.DEBUG)\nlog.addHandler(handler)\n\n\nrequests.packages.urllib3.disable_warnings()\n\nUserAgent = useragent.rand_agent()\nSTREAM_FLAG = False\n\n\ndef _header(ContentType=None, **_dict):\n    u\"\"\"产生header\n    第一个是位置参数ContentType因为连字符`-`不可用于关键字定义，其余是关键字参数\n    \"\"\"\n    general = {\"Progma\": \"no-cache\",\n               \"User-Agent\": UserAgent,\n               \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n               \"Accept-Encoding\": \"gzip, deflate, sdch\",\n               \"Accept-Language\": \"zh-CN,zh;q=0.8\",\n               \"Connection\": \"keep-alive\",\n               \"Cache-Control\": \"no-cache\"}\n    if ContentType:\n        general.update({\"Content-Type\": ContentType})\n    general.update(_dict)\n    return general\n\n\ndef hidden_form(postpage):\n    u\"\"\"postpage 必须是resopse.text\n    \"\"\"\n    _dict = {}\n    soup = BeautifulSoup(postpage, \"lxml\")\n    hiddens = soup.form.find_all(attrs={\"type\": \"hidden\"})\n    for hidden in hiddens:\n        _dict[hidden[\"name\"]] = hidden[\"value\"]\n    return _dict\n\n\ndef save_html(response, filename):\n    u\"\"\"保存requests库请求的页面\n    用于调试\n    \"\"\"\n    with open(filename, \"wb\") as html:\n        html.write(response.content)\n    return None\n\n\ndef vertical_merge(img_top, img_bottom):\n    u\"\"\"合并两个宽度相同的图像,垂直的方式\n    img_top = StringIO(res.content)\n    41pixel\n    \"\"\"\n    top = Image.open(img_top)\n    bottom = Image.open(img_bottom)\n    width = top.width\n    height = top.height + bottom.height - 41\n    new_img = Image.new(\"RGB\", (width, height))\n    new_img.paste(top, (0, 0))\n    crop = bottom.crop((0, 41, bottom.width, bottom.height))\n    new_img.paste(crop, (0, top.height))\n    return new_img\n\nurls = {\"login\": \"http://tyxk.dgut.edu.cn/index.php?m=&c=Index&a=login\",\n        \"check_login\": \"http://tyxk.dgut.edu.cn/index.php?m=&c=Index&a=check_login\",\n        \"home\": \"http://tyxk.dgut.edu.cn/index.php?m=Home&c=Student&a=index\",\n        \"cas_tyxk\": \"https://cas.dgut.edu.cn/?appid=tyxk\",\n        \"cas_post\": \"https://cas.dgut.edu.cn/User/Login?ReturnUrl=%2f%3fappid%3dtyxk&appid=tyxk\",\n        \"cas_host\": \"cas.dgut.edu.cn\",\n        \"tyxk_host\": \"tyxk.dgut.edu.cn\",\n        \"tyxk_base\": \"http://tyxk.dgut.edu.cn/\",\n        \"cas_base\": \"https://cas.dgut.edu.cn\",\n        #\"jwxt\": \"http://jwxt.dgut.edu.cn/jwweb/\",\n        \"cas_jwxt\": \"https://cas.dgut.edu.cn/?appid=jwxt\",\n        \"jwxt_post\": \"https://cas.dgut.edu.cn/User/Login?ReturnUrl=%2f%3fappid%3djwxt&appid=jwxt\",\n        \"jwxt_host\": \"jwxt.dgut.edu.cn\",\n        \"jwxt_logout\": \"http://jwxt.dgut.edu.cn/jwweb/sys/Logout.aspx\",\n\n        # new url system\n        \"cas\": \"https://cas.dgut.edu.cn\",\n        \"jwxt\": \"http://jwxt.dgut.edu.cn\",\n        \"tyxk\": \"http://tyxk.dgut.edu.cn\"\n        }\n\n\n# return step_1.cookies, UserAgent\n\n\nclass JWCAuth(object):\n    \"\"\"docstring for jwcAuth\"\"\"\n\n    def __init__(self, username, password):\n        super(JWCAuth, self).__init__()\n        self.post_dict = {\"UserName\": username,\n                          \"Password\": password}\n        self.auth_cookie = None\n        self.auth = requests.Session()\n        self.auth.headers.update(_header())\n\n    def login(self):\n\n        step_1 = requests.get(urls[\"cas\"] + \"/User/Login\",  # urls[\"jwxt_post\"],\n                              params={\"ReturnUrl\": \"/?appid=jwxt\",\n                                      \"appid\": \"jwxt\"},\n                              headers=_header(Host=urls[\"cas_host\"]),\n                              allow_redirects=False,\n                              verify=False,\n                              stream=STREAM_FLAG)\n        # for debug\n        save_html(step_1, \"step_1.html\")\n        log.debug(\"\\nstep_1\\nRequest:\\n{}\\nResponse:\\n{}\".format(\n            step_1.url, step_1.headers))\n        time.sleep(2)\n\n        hiddens = hidden_form(step_1.text)\n        form_data = (lambda a, b: b)(hiddens.update(self.post_dict), hiddens)\n        step_2 = requests.post(step_1.url,  # urls[\"jwxt_post\"],\n                               headers=_header(\"application/x-www-form-urlencoded\",\n                                               Host=urls[\"cas\"][8:],\n                                               Referer=step_1.url),\n                               cookies=step_1.cookies,\n                               data=form_data,\n                               allow_redirects=False,\n                               verify=False,\n                               stream=STREAM_FLAG\n                               )\n        save_html(step_2, \"step_2.html\")\n        log.debug(\"\\nstep_2\\nRequest:\\n{}\\nResponse:\\n{}\".format(\n            step_2.url, step_2.headers))\n        time.sleep(0.5)\n\n        step_3 = requests.get(urls[\"cas\"],\n                              params={\"appid\": \"jwxt\"},\n                              headers=_header(Host=urls[\"cas\"][8:],\n                                              Referer=step_1.url),\n                              allow_redirects=False,\n                              verify=False,\n                              cookies=(lambda a, b: b)(step_1.cookies.update(\n                                  step_2.cookies), step_1.cookies),\n                              stream=STREAM_FLAG\n                              )\n        log.debug(\"\\nstep_3\\nRequest:\\n{}\\nResponse:\\n{}\".format(\n            step_3.url, step_3.headers))\n        save_html(step_3, \"step_3.html\")\n        time.sleep(0.5)\n        step_4 = requests.get(step_3.headers[\"location\"],\n                              headers=_header(Host=urls[\"jwxt\"][7:]),\n                              allow_redirects=False,\n                              verify=False,\n                              stream=STREAM_FLAG)\n        log.debug(\"\\nstep_4\\nRequest:\\n{}\\nResponse:\\n{}\".format(\n            step_4.url, step_4.headers))\n        save_html(step_4, \"step_4.html\")\n        self.auth_cookie = step_4.cookies\n        # self.auth.headers.update(step_4.cookies)\n        return None\n\n    def never_give_up(self):\n        try_num = 0\n        while True:\n            try:\n                try_num += 1\n                return self.login()\n            except:\n                pass\n\n    def logout(self):\n        res = requests.get(urls[\"jwxt\"] + \"/jwweb/sys/Logout.aspx\",\n                           cookies=self.auth_cookie,\n                           headers=_header(Host=urls[\"jwxt_host\"],\n                                           Referer=urls[\"jwxt\"] + \"/jwweb/SYS/Main_tools.aspx\"),\n                           allow_redirects=False,\n                           verify=False)\n        return res\n\n    def get_score(self):\n        # get txt_xm\n        step_1 = requests.get(urls[\"jwxt\"] + \"/jwweb/xscj/Stu_MyScore.aspx\",\n                              headers=_header(Host=urls[\"jwxt\"][7:],\n                                              Referer=urls[\"jwxt\"] + \"/jwweb/sys/menu.aspx\"),\n                              cookies=self.auth_cookie)\n        save_html(step_1, \"get_score_step_1.html\")\n\n        soup_1 = BeautifulSoup(step_1.text, 'lxml')\n        txt_xm = soup_1.find_all(attrs={\"name\": \"txt_xm\"})[0][\"value\"]\n        form_data = {\"txt_xm\": txt_xm,\n                     \"btn_search\": \"%BC%EC%CB%F7\",\n                     \"SJ\": \"0\",  # 0： 原始成绩 1：有效成绩\n                     \"SelXNXQ\": \"0\",  # 0:入学以来 1：学年 2：学期\n                     \"zfx_flag\": \"0\"  # 0：主修 1：辅修\n                     }\n        post = requests.post(urls[\"jwxt\"] + \"/jwweb/xscj/Stu_MyScore_rpt.aspx\",\n                             cookies=self.auth_cookie,\n                             headers=_header(Host=urls[\"jwxt\"][7:],\n                                             Referer=urls[\"jwxt\"] + \"/jwweb/xscj/Stu_MyScore.aspx\"),\n                             data=form_data\n                             )\n        # 解析URL\n        soup = BeautifulSoup(post.text, 'lxml')\n        imgs = soup.find_all(\"img\")\n        # (xnxq, (filename, src, src))\n        imgs_info = []\n        for img in imgs:\n            url = img[\"src\"]\n            # 20141:2014-2015学年第二学期 20140第一学期\n            xnxq = urlparse.parse_qs(url.split(\"?\")[1], True)[\"xnxq\"][0]\n            if xnxq in imgs_info:\n                index = imgs_info.index(xnxq) + 1\n                imgs_info[index].append(url)\n            else:\n                xn, xq = int(xnxq[:4]), int(xnxq[4:])\n                filename = u\"{}-{}学年第{}学期.png\".format(xn, xn + 1, xq + 1)\n                imgs_info.append(xnxq)\n                imgs_info.append([filename, url])\n        for index in xrange(1, len(imgs_info), 2):\n            img_info = imgs_info[index]\n            filename = img_info[0]\n            if len(img_info) > 2:\n                #\n                def get_img(url):\n                    res = requests.get(urls[\"jwxt\"] + \"/jwweb/xscj/\" + url,\n                                       headers=_header(Host=urls[\"jwxt\"][7:],\n                                                       Referer=urls[\"jwxt\"] + \"/jwweb/xscj/Stu_MyScore_rpt.aspx\"),\n                                       cookies=self.auth_cookie)\n                    return res.content\n                contents = [get_img(url) for url in img_info[1:]]\n                imgfile = vertical_merge(\n                    *[StringIO(content) for content in contents])\n                imgfile.save(filename, format=\"png\")\n            else:\n                url = img_info[1]\n                res = requests.get(urls[\"jwxt\"] + \"/jwweb/xscj/\" + url,\n                                   headers=_header(Host=urls[\"jwxt\"][7:],\n                                                   Referer=urls[\"jwxt\"] + \"/jwweb/xscj/Stu_MyScore_rpt.aspx\"),\n                                   cookies=self.auth_cookie)\n                imgfile = Image.open(StringIO(res.content))\n                imgfile.save(filename, format=\"png\")\n        return None\n\n\nclass TYXKAuth(object):\n    \"\"\"docstring for TyxkAuth\"\"\"\n\n    def __init__(self, arg):\n        super(TYXKAuth, self).__init__()\n        self.arg = arg\n\n    def login(self, username, password):\n        u\"\"\"\n        \"\"\"\n        try:\n            step_1 = requests.get(urls[\"login\"],\n                                  headers=_header(Host=urls[\"tyxk_host\"]),\n                                  allow_redirects=False,\n                                  verify=False)  # PHPSESSID\n\n            step_2 = requests.get(urls[\"check_login\"],\n                                  headers=_header(Host=urls[\"tyxk_host\"],\n                                                  Referer=step_1.url),\n                                  cookies=step_1.cookies,\n                                  allow_redirects=False,\n                                  verify=False)\n\n            step_3 = requests.get(urls[\"cas_tyxk\"],\n                                  headers=_header(Host=urls[\"cas_host\"],\n                                                  Referer=urls[\"tyxk_base\"]),\n                                  # cookies=,\n                                  allow_redirects=False,\n                                  verify=False)\n\n            # __RequestVerificationToken\n            step_4 = requests.get(urls[\"cas_post\"],\n                                  headers=_header(Host=urls[\"cas_host\"],\n                                                  Referer=urls[\"tyxk_base\"]),\n                                  # cookies=,\n                                  allow_redirects=False,\n                                  verify=False)\n\n            # step_4_cookie = step_4.cookies.get_dict().items()[0]\n            # 表单里的是用来检测是否交换的\n\n            form_data = {\"UserName\": \"201441302623\",\n                         \"Password\": \"pwkilove5\",\n                         \"ReturnUrl\": \"/?appid=tyxk\",\n                         step_4_cookie[0]: step_4_cookie[1]}\n\n            # .ASPAUTH\n            step_5 = requests.post(urls[\"cas_post\"],\n                                   data=form_data,\n                                   headers=_header(\"application/x-www-form-urlencoded\",\n                                                   Host=urls[\"cas_host\"],\n                                                   Referer=urls[\"cas_post\"],\n                                                   Origin=urls[\"cas_base\"]\n                                                   ),\n                                   cookies=step_4.cookies,\n                                   allow_redirects=False,\n                                   verify=False)\n\n            step_6 = requests.get(urls[\"cas_tyxk\"],\n                                  headers=_header(Host=urls[\"cas_host\"],\n                                                  Referer=urls[\"cas_post\"]),\n                                  cookies=(lambda a, b: b)(step_4.cookies.update(\n                                      step_5.cookies), step_4.cookies),\n                                  allow_redirects=False,\n                                  verify=False)\n\n            # platform=pc url\n            step_7 = requests.get(step_6.headers[\"location\"],\n                                  headers=_header(Host=urls[\"tyxk_host\"]),\n                                  cookies=step_1.cookies,\n                                  allow_redirects=False,\n                                  verify=False)\n\n            step_8 = requests.get(urls[\"home\"],\n                                  headers=_header(Host=urls[\"tyxk_host\"],\n                                                  Referer=step_7.url),\n                                  cookies=step_1.cookies,\n                                  allow_redirects=False,\n                                  verify=False)\n            return step_1.cookies\n        except:\n            return None\n\n    def logout(self):\n        pass\n\n\nclass NICZY(object):\n    u\"\"\"学校媒体资源网客户端\n    http://niczy.dgut.edu.cn\n    \"\"\"\n\n    def __init__(self, arg):\n        super(NICZY, self).__init__()\n        self.arg = arg\n\n    def login(self):\n        pass\n\n    def logout(self):\n        pass\n\n\nclass DgutCas(object):\n    \"\"\"docstring for ClassName\"\"\"\n\n    def __init__(self, username, password):\n        super(DgutCas, self).__init__()\n        self._username = username\n        self._password = password\n\n    def cas(self, appid):\n        u\"\"\"\n        :param appid: string for example \"tyxk\" \n        :return: raise ValueError if given a wrong password else return location url\n        \"\"\"\n\n        url = \"https://cas.dgut.edu.cn\"\n        return_url = \"/?appid={}\".format(appid)\n        \n        params = {\"ReturnUrl\": return_url,\n                  \"appid\": appid}\n\n        data = {\"UserName\": self._username,\n                \"Password\": self._password,\n                \"ReturnUrl\": return_url,\n                }\n\n        session = requests.Session()\n        session.headers[\"User-Agent\"] = UserAgent\n        session.verify = False\n\n        get = session.get(url + \"/User/Login\", params=params,)\n\n        token_name = \"__RequestVerificationToken\"\n        token = self.get_form_token(get, token_name)\n        data.update({token_name: token})\n        \n        session.headers[\"Referer\"] = get.url\n\n        post = session.post(get.url, data=data, allow_redirects=False)\n\n        if post.status_code == 200:\n            # 判断密码错误\n            raise ValueError(\"wrong password error\")\n        elif post.status_code == 302:\n            location = session.get(url + return_url, allow_redirects=False)\n            return location.headers[\"location\"]\n\n    def get_form_token(self, response, token_name):\n        u\"\"\"\n        :param response: requests.Response object\n        \"\"\"\n\n        soup = BeautifulSoup(response.text, \"lxml\")\n        element = soup.find_all(attrs={\"name\": token_name})[0]\n        return element[\"value\"]\n\n    def niczy(self, ):\n        pass\n\n    def tyxk(self, ):\n        try:\n            url = self.cas(\"tyxk\")\n        except ValueError:\n            raise\n        session = requests.Session()\n        session.headers[\"User-Agent\"] = UserAgent\n        session.verify = False\n        while True:\n            try:\n                get = session.get(url, timeout=6)\n                print \"get\", get.cookies\n                print \"session\", session.cookies\n                if len(session.cookies) == 1:\n                    return session\n            except:\n                print \"new connection\"\n                print session.cookies\n\n    def jwxt(self, ):\n        pass\n\n    def self_(self, ):\n        pass\n\n    def my(self, ):\n        pass\n\n    def yktcx(self, ):\n        pass\n\n    def wlbx(self, ):\n        pass\n\ndef test():\n    # import auth\n    cas = auth.DgutCas(\"201441302623\", \"pwkilove5\")\n    tyxk = cas.cas(\"tyxk\")\n\nclass PhysicalClient(object):\n    def ",
			"file": "auth.py",
			"file_size": 17516,
			"file_write_time": 131021407619571688,
			"settings":
			{
				"buffer_size": 16816,
				"line_ending": "Windows"
			}
		},
		{
			"file": "gui_code/login.py",
			"settings":
			{
				"buffer_size": 17559,
				"line_ending": "Windows"
			}
		},
		{
			"file": "gui_code/teachers_info.py",
			"settings":
			{
				"buffer_size": 10010,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/c.sublime-build",
					""
				],
				[
					"Packages/User/c.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/c.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/Python.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 334.0,
		"last_filter": "color",
		"selected_items":
		[
			[
				"color",
				"Color Picker"
			],
			[
				"pyton",
				"Set Syntax: Python"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"pep",
				"User: Python PEP8 Autoformat"
			],
			[
				"",
				"Build With: Python - Syntax Check"
			],
			[
				"l",
				"MarkdownEditing: Markdown Lint"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"lin",
				"MarkdownEditing: Markdown Lint"
			],
			[
				"ma",
				"Markdown Preview: Preview in Browser"
			],
			[
				"ipyt",
				"SublimeREPL: Python - IPython"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"mak",
				"Markdown Preview: Preview in Browser"
			],
			[
				"ipy",
				"SublimeREPL: Python - IPython"
			],
			[
				"colo",
				"Color Picker"
			],
			[
				"markd",
				"Markdown Preview: Preview in Browser"
			],
			[
				"side",
				"Browse Mode: Left Sidebar"
			],
			[
				"emmet",
				"Emmet: Balance (inward)"
			],
			[
				"align",
				"Preferences: Alignment Key Bindings – Default"
			],
			[
				"py",
				"Build With: Python - Syntax Check"
			],
			[
				"tag",
				"Tag: Auto-Format Tags on Document"
			],
			[
				"view",
				"View In Browser"
			],
			[
				"mark",
				"Markdown Preview: Preview in Browser"
			],
			[
				"ta",
				"Tag: Auto-Format Tags on Document"
			],
			[
				"che",
				"Markdown Preview: Open Markdown Cheat sheet"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"chea",
				"Markdown Preview: Open Markdown Cheat sheet"
			],
			[
				"vie",
				"View In Browser"
			],
			[
				"makr",
				"Markdown Preview: Preview in Browser"
			],
			[
				"c",
				"Set Syntax: C"
			],
			[
				"c++",
				"Set Syntax: C++"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"run",
				"SublimeREPL: Python - RUN current file"
			],
			[
				"ip",
				"SublimeREPL: Python - IPython"
			],
			[
				"git comm",
				"Git: Quick Commit Current File"
			],
			[
				"git add ",
				"Git: Add..."
			],
			[
				"javas",
				"Set Syntax: JavaScript"
			],
			[
				"ipyth",
				"SublimeREPL: Python - IPython"
			],
			[
				"emmt",
				"Set Syntax: Emmet"
			],
			[
				"fil",
				"Browse Mode: Current file or project"
			],
			[
				"File b",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"git branch",
				"Git: New Branch"
			],
			[
				"git commit c",
				"Git: Quick Commit Current File"
			],
			[
				"com",
				"Git: Commit"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"gits",
				"Git: Status"
			],
			[
				"gitflow",
				"Git-flow: Feature Finish"
			],
			[
				"git",
				"Git: Help"
			],
			[
				"dird",
				"Browse Mode: Left Sidebar"
			]
		],
		"width": 528.0
	},
	"console":
	{
		"height": 950.0,
		"history":
		[
			"enumrate",
			"range(1,3)",
			"str(2)",
			"print('\\t')",
			"print('\\a')",
			"print '\\a'",
			"pull",
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			"print('d')",
			"print 'd'"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/wk/OneDrive/W/QiangGui",
		"/C/Users/wk/OneDrive/W/QiangGui/gui_code",
		"/C/Users/wk/OneDrive/W/QiangGui/gui_code/failed",
		"/C/Users/wk/OneDrive/W/QiangGui/note",
		"/C/Users/wk/OneDrive/W/QiangGui/old_code",
		"/C/Users/wk/OneDrive/W/QiangGui/ps"
	],
	"file_history":
	[
		"/C/Users/wk/OneDrive/W/QiangGui/gui_code/failed/qiang.py",
		"/C/Python27/Lib/site-packages/wx-3.0-msw/wx/gizmos.py",
		"/C/Python27/Lib/site-packages/wx-3.0-msw/wx/webkit.py",
		"/C/Users/wk/OneDrive/W/QiangGui/gui_code/avatar_process.py",
		"/C/Users/wk/OneDrive/W/QiangGui/note/python笔记.md",
		"/C/Users/wk/AppData/Roaming/Sublime Text 3/Packages/User/Python.sublime-build",
		"/C/Users/wk/AppData/Roaming/Sublime Text 3/Packages/User/Python.sublime-settings",
		"/C/Program Files/wxPython3.0 Docs and Demos/demo/GridSimple.py",
		"/C/Users/wk/OneDrive/W/QiangGui/gui_code/failed/toolbook.py",
		"/C/Users/wk/OneDrive/W/QiangGui/gui_code/login.py",
		"/C/Users/wk/Downloads/radiobutton_sample.py",
		"/C/Program Files/Internet Explorer/iexplore.exe",
		"/C/Users/wk/OneDrive/W/QiangGui/auth.py",
		"/C/Users/wk/OneDrive/W/QiangGui/gui_code/qiang.py",
		"/C/Users/wk/OneDrive/W/QiangGui/gui_code/new_design.py",
		"/C/Users/wk/OneDrive/W/QiangGui/QiangGui.sublime-workspace",
		"/C/Users/wk/OneDrive/W/QiangGui/gui_code/wx笔记.md",
		"/C/Users/wk/OneDrive/W/QiangGui/.gitignore",
		"/C/Users/wk/OneDrive/W/QiangGui/笔记.md",
		"/C/Program Files/wxPython3.0 Docs and Demos/demo/Main.py",
		"/C/Python27/lib/site-packages/wx-3.0-msw/wx/_core.py",
		"/C/Users/wk/OneDrive/W/QiangGui/gui_code/data_gen.py",
		"/C/Users/wk/OneDrive/W/miscellaneous/willpower_split.py",
		"/C/ws/.gitconfig",
		"/C/Users/wk/.gitconfig",
		"/C/Users/wk/OneDrive/W/wxpython/mycode/flow.py",
		"/C/Users/wk/Desktop/code/myproject/gxk.md",
		"/C/Users/wk/Desktop/code/myproject/xuanke.py",
		"/C/Users/wk/Desktop/code/try/xcjc.py",
		"/C/Users/wk/getdata.py",
		"/C/Users/wk/OneDrive/草稿/hello.py",
		"/C/Users/wk/OneDrive/mycode/python/jwc.py",
		"/C/Users/wk/OneDrive/xueke/tyxk.py",
		"/C/Users/wk/Desktop/code/myproject/speed.py",
		"/C/Users/wk/Desktop/code/myproject/jwc.py",
		"/C/Users/wk/OneDrive/W/QiangGui/dialog.py",
		"/C/Users/wk/OneDrive/W/QiangGui/helper.py",
		"/C/Users/wk/OneDrive/W/QiangGui/login.py",
		"/C/Users/wk/OneDrive/W/QiangGui/LoginDialog.py",
		"/C/Users/wk/OneDrive/W/QiangGui/qiang.py",
		"/C/Users/wk/Desktop/code/myproject/qiang.py",
		"/C/Users/wk/OneDrive/W/QiangGui/all.htm",
		"/C/Users/wk/OneDrive/W/QiangGui/get_score_step_1.html",
		"/C/Users/wk/login.py",
		"/C/ws/code/fasong.py",
		"/C/Users/wk/OneDrive/W/QiangGui/all.html",
		"/C/Users/wk/OneDrive/W/QiangGui/useragent.py",
		"/C/Users/wk/OneDrive/W/QiangGui/jwc_auth.py",
		"/C/Users/wk/Downloads/Sample file.csv",
		"/C/Users/wk/OneDrive/W/wxpython/Python网络工具.md",
		"/C/Users/wk/OneDrive/W/wxpython/字符串和编码.md",
		"/C/Users/wk/OneDrive/W/pengwk.com/git-server/git-server.md",
		"/C/Users/wk/OneDrive/W/QiangGui/PayImage.py",
		"/C/Users/wk/OneDrive/W/wxpython/.gitignore",
		"/C/Users/wk/OneDrive/W/wxpython/mycode/try.log",
		"/C/Users/wk/AppData/Local/Temp/Rar$DIb0.884/USE PASSWORD - 12345.txt",
		"/E/学校课程资料/复变/复变函数与积分变换作业.txt",
		"/C/Users/wk/OneDrive/W/wxpython/编码心得.md",
		"/C/Users/wk/OneDrive/W/wxpython/英语帮助.md",
		"/C/Users/wk/OneDrive/W/wxpython/术语.md",
		"/C/Users/wk/OneDrive/W/wxpython/Exception.md",
		"/C/Users/wk/OneDrive/W/wxpython/pep8.md",
		"/C/Users/wk/OneDrive/W/wxpython/problem-map.md",
		"/C/Users/wk/Downloads/复变函数与积分变换作业.txt",
		"/C/Python27/Lib/site-packages/pydub/audio_segment.py",
		"/C/Python27/Lib/site-packages/pydub/utils.py",
		"/C/Users/wk/Desktop/code/myproject/qiang.spec",
		"/C/Python27/Lib/site-packages/pydub/__init__.py",
		"/C/Python27/Lib/site-packages/pydub/exceptions.py",
		"/C/Users/wk/Downloads/ff-prompt.bat",
		"/C/Users/wk/Downloads/README.txt",
		"/C/Users/wk/Downloads/win32/VERSION",
		"/C/Users/wk/OneDrive/shadowsock-config.js",
		"/C/Users/wk/OneDrive/W/wxpython/mycode/编码心得.md",
		"/C/Users/wk/OneDrive/W/wxpython/mycode/my_data.py",
		"/C/Users/wk/OneDrive/W/wxpython/mycode/doc/conf.py",
		"/C/Users/wk/OneDrive/W/wxpython/mycode/doc/NetworkManager.rst",
		"/C/Users/wk/OneDrive/W/wxpython/Sphinx文档.md",
		"/C/Users/wk/OneDrive/W/wxpython/mycode/doc/QiangKeDoc.rst",
		"/C/Users/wk/OneDrive/W/wxpython/mycode/doc/intro.rst",
		"/C/ws/.ipython/README",
		"/C/ws/.ipython/profile_default/startup/00-modules.py",
		"/C/ws/.ipython/profile_default/startup/README",
		"/E/book/Shadowsocks-win-2.5.6/pac.txt",
		"/C/Users/wk/Desktop/code/report_ip.py",
		"/C/Users/wk/OneDrive/W/wxpython/问题.md",
		"/C/Users/wk/OneDrive/W/wxpython/大纲.md",
		"/C/Users/wk/OneDrive/W/pengwk.com/pengwk.com",
		"/C/Users/wk/OneDrive/W/pengwk.com/git-server.md",
		"/C/Users/wk/Desktop/sshd_config",
		"/C/Users/wk/OneDrive/W/Raspberry/权限.md",
		"/C/Users/wk/OneDrive/W/Raspberry/大纲.md",
		"/C/Users/wk/OneDrive/W/pengwk.com/Debian登录记录.md",
		"/C/Users/wk/OneDrive/W/Raspberry/软件或系统编译.md",
		"/C/Users/wk/OneDrive/W/Raspberry/常用配置文件.md",
		"/C/Users/wk/OneDrive/W/Raspberry/Shell基本.md",
		"/C/Users/wk/OneDrive/W/Raspberry/连接.md",
		"/C/Users/wk/OneDrive/W/Raspberry/未知.md",
		"/C/Users/wk/OneDrive/W/pengwk.com/Debian 后台.md",
		"/C/Users/wk/OneDrive/W/pengwk.com/Debian 端口.md",
		"/C/Users/wk/OneDrive/W/pengwk.com/阿里云推广.md",
		"/C/Users/wk/OneDrive/W/Raspberry/自动化.md",
		"/C/Users/wk/OneDrive/W/Raspberry/系统本身.md",
		"/C/Users/wk/Downloads/涓嶈兘鐧粂outude鐨勮В鍐虫柟妗_txt",
		"/C/Users/wk/OneDrive/W/Markdown.md",
		"/C/Windows/ADVPCB99SE.INI",
		"/C/Windows/AdvSch99SE.ini",
		"/C/Users/wk/AppData/Local/VirtualStore/Windows/AdvSch99SE.ini",
		"/E/Program/protel 99 se/System/ADVPCB.XRF",
		"/E/Program/protel 99 se/System/advpcb.rcs",
		"/E/Program/protel 99 se/System/ADVPCB.INS",
		"/C/Users/wk/AppData/Local/Temp/xshDCDC.tmp",
		"/C/Users/wk/OneDrive/W/Raspberry/file/xshell/SolarizedDark.xcs",
		"/C/Users/wk/OneDrive/W/Raspberry/SolarizedLight.xcs",
		"/C/Users/wk/OneDrive/Documents/solarized_light.xcs",
		"/C/Users/wk/Documents/WindowsPowerShell/solarized-dark.reg",
		"/C/Users/wk/Documents/WindowsPowerShell/a.reg",
		"/C/Users/wk/OneDrive/W/Raspberry/启动级别.md",
		"/C/Users/wk/OneDrive/W/Raspberry/硬件.md",
		"/C/Users/wk/OneDrive/W/Raspberry/基本操作.md",
		"/C/Users/wk/Desktop/课程表.PNG",
		"/C/Users/wk/OneDrive/W/Raspberry/rpibook.sublime-project",
		"/C/Users/wk/OneDrive/W/Raspberry/system/etc/init/mounted-proc.conf",
		"/C/Users/wk/OneDrive/W/Raspberry/system/etc/resolv.conf",
		"/C/Users/wk/OneDrive/W/Raspberry/system/etc/rsyslog.conf",
		"/C/Users/wk/OneDrive/W/Raspberry/system/etc/sysctl.conf",
		"/C/Users/wk/OneDrive/W/Raspberry/system/etc/inittab",
		"/C/Users/wk/OneDrive/W/Raspberry/system/etc/rc.local"
	],
	"find":
	{
		"height": 44.0
	},
	"find_in_files":
	{
		"height": 137.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"cookies",
			"    \n",
			"                        \n",
			"处理课程选择事件，删除选择课程，更新到DoSelectPanel",
			"胡",
			"老师信息",
			"pic",
			"EVT_GRID_LABEL_LEFT_CLICK",
			"wx.grid",
			"时获得。",
			">\n",
			"type的值",
			"以指定像素为单位，进行模糊处理",
			"image",
			" \n",
			"Center",
			"pengwk",
			"page",
			"Nice",
			"dgut",
			"kvs",
			"elif",
			"else",
			"NetworkManager",
			"raw_html",
			"True",
			":",
			"Change",
			"Change Libr",
			"Count",
			"Change",
			"Change Libr",
			"所有者可以读写，用户组，其他用户只能读，新建文件夹的默认权限是0755，拥有者可以读写执行，用户组和其他用户可以读和执行。",
			"port-map",
			"dht",
			"allCourse",
			"Append",
			"Beauti",
			"tyxk_index",
			"casurl",
			"baseurl",
			"MyFrame",
			"iframe",
			"pub_time",
			"201400004144",
			"cjPic",
			"jpg",
			"功能",
			"timeer",
			"受"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": true,
		"regex": false,
		"replace_history":
		[
			"self.allCourse",
			"cas_base_url",
			"tyxk_base_url",
			"收"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": false,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "gui_code/main_gui.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25180,
						"regions":
						{
						},
						"selection":
						[
							[
								19322,
								19322
							]
						],
						"settings":
						{
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2402.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "note/wx笔记.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13866,
						"regions":
						{
							"TagLint":
							{
								"flags": 2356,
								"icon": "dot",
								"regions":
								[
									[
										5980,
										5983
									]
								],
								"scope": "variable.parameter"
							}
						},
						"selection":
						[
							[
								13603,
								13603
							]
						],
						"settings":
						{
							"color_scheme": "Packages/MarkdownEditing/MarkdownEditor-Yellow.tmTheme",
							"is_xml": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/MarkdownEditing/Markdown (Standard).tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 21261.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "auth.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16816,
						"regions":
						{
						},
						"selection":
						[
							[
								16816,
								16816
							]
						],
						"settings":
						{
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12488.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "gui_code/login.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 17559,
						"regions":
						{
						},
						"selection":
						[
							[
								13608,
								13608
							]
						],
						"settings":
						{
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9156.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "gui_code/teachers_info.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10010,
						"regions":
						{
						},
						"selection":
						[
							[
								2355,
								2355
							]
						],
						"settings":
						{
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 84.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 38.0
	},
	"input":
	{
		"height": 72.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 381.0
	},
	"output.find_results":
	{
		"height": 256.0
	},
	"output.git":
	{
		"height": 256.0
	},
	"output.git-commit":
	{
		"height": 346.0
	},
	"output.git-init":
	{
		"height": 225.0
	},
	"output.markdown":
	{
		"height": 232.0
	},
	"output.mde":
	{
		"height": 546.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "QiangGui.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"login",
				"login.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\wk\\OneDrive\\W\\wxpython\\wxpython.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 280.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
